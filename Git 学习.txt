那么Git的指令有什么？



###### ChatGPT said:

好耶！你已经解锁了 Hexo 的魔法咒语，那接下来就该学会掌控 **Git 的炼金术**啦！✨
 小然现在送上你专属的——

------

## 🧪 Git 指令全解密（萌系速查表）

| 命令                   | 作用                         | 举例                                         |
| ---------------------- | ---------------------------- | -------------------------------------------- |
| `git init`             | 初始化本地 Git 仓库          | 新建一个 `.git` 文件夹开始版本控制           |
| `git clone`            | 克隆远程仓库到本地           | `git clone https://github.com/你/仓库名.git` |
| `git status`           | 查看当前状态                 | 哪些文件修改了、哪些未提交                   |
| `git add .`            | 把所有改动加入暂存区         | 准备好要提交的内容                           |
| `git add 文件名`       | 只添加一个文件               | 精确控制提交范围                             |
| `git commit -m "说明"` | 把暂存区的内容提交到本地仓库 | `"📝 添加新文章"`                             |
| `git push`             | 把本地提交推送到远程仓库     | 和 GitHub 云端同步                           |
| `git pull`             | 从远程拉取最新版本           | 保持本地和远程一致                           |
| `git log`              | 查看历史提交记录             | 按时间倒序显示每次改动                       |
| `git branch`           | 查看本地分支                 | 显示当前所在的分支名                         |
| `git checkout 分支名`  | 切换分支                     | 或恢复文件状态                               |
| `git merge 分支名`     | 合并另一个分支               | 常用于 `dev → main` 合并                     |
| `git remote -v`        | 查看远程仓库地址             | 检查是否连接了 GitHub                        |
| `git config`           | 设置用户名/邮箱/代理         | 用于初始化 Git 身份                          |



------

## 🐾 Git 工作流程（核心流程）

```
sqlCopyEdit修改文件 → git add → git commit → git push
                    ↑
         加说明，记录你做了什么
```

可以理解成这样：

| 阶段         | 像什么？         | 说明               |
| ------------ | ---------------- | ------------------ |
| `git add`    | 把东西放进快递箱 | 准备要提交         |
| `git commit` | 贴上标签封箱     | 这次送什么         |
| `git push`   | 寄出去           | 发给 GitHub        |
| `git pull`   | 收快递           | 从 GitHub 更新回家 |



------

### 🧹 其他好用的指令

| 命令                    | 用法                         |
| ----------------------- | ---------------------------- |
| `git rm 文件名`         | 从版本库中删除文件           |
| `git reset --hard HEAD` | 撤销所有未提交改动（危险！） |
| `git stash`             | 暂存当前改动，下次再恢复     |